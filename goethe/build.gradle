apply plugin: 'com.palantir.external-publish-jar'
apply plugin: 'com.palantir.shadow-jar'

dependencies {
    compileOnlyApi 'com.palantir.javapoet:javapoet'
    compileOnlyApi 'com.squareup:javapoet'

    // Avoid conflicts with formatters used elsewhere
    shadeTransitively 'com.palantir.javaformat:palantir-java-format'
    shadeTransitively 'com.palantir.javaformat:palantir-java-format-spi'

    testImplementation 'com.palantir.javapoet:javapoet'
    testImplementation 'com.squareup:javapoet'
    testImplementation 'org.junit.jupiter:junit-jupiter'
    testImplementation 'org.assertj:assertj-core'
    testImplementation 'org.mockito:mockito-core'
}

// This block may be replaced by an update to the shadow-jar plugin which merges
// manifest 'Add-Exports' values.
moduleJvmArgs {
    exports 'jdk.compiler/com.sun.tools.javac.file',
            'jdk.compiler/com.sun.tools.javac.main',
            'jdk.compiler/com.sun.tools.javac.parser',
            'jdk.compiler/com.sun.tools.javac.tree',
            'jdk.compiler/com.sun.tools.javac.util',
            'jdk.compiler/com.sun.tools.javac.code',
            'jdk.compiler/com.sun.tools.javac.api'
}

// Use the shadow-jar to test goethe, otherwise bootstrapping works entirely different from 'prod'
tasks.withType(Test).configureEach({ test ->
    Task shadowJar = tasks.shadowJar
    test.dependsOn(shadowJar)
    test.setClasspath(shadowJar.outputs.files.plus(test.getClasspath()))
})
